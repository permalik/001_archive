---
const serverURL = import.meta.env.ARCHIVE_SERVER;
interface RepoProps {
    Owner: string;
    Name: string;
    Category: string;
    Description: string;
    HTMLURL: string;
    Homepage: string;
    Topics: string[];
    CreatedAt: string;
    UpdatedAt: string;
    UID: number;
}

async function repos(): Promise<RepoProps[]> {
    const response = await fetch(serverURL);
    let data = await response.json();
    let allRepos: RepoProps[] = [];
    for (let i = 0; i < data.length; i++) {
        let repo: RepoProps = {
            Owner: data[i].owner,
            Name: data[i].name,
            Category: data[i].category,
            Description: data[i].description,
            HTMLURL: data[i].htmlurl,
            Homepage: data[i].homepage,
            Topics: [],
            CreatedAt: data[i].createdAt,
            UpdatedAt: data[i].updatedAt,
            UID: data[i].uid,
        };

        if (data[i].topics.length < 1) {
            for (let j = 0; j < data[i].topics; j++) {
                repo.Topics.push(data[i].topics[j]);
            }
        } else {
            repo.Topics.push("");
        }
        allRepos.push(repo);
    }
    return allRepos;
}

const allRepos: RepoProps[] = await repos();
---

<ul>
    <div class="title">projects</div>
    {
        allRepos.map((repo) => (
            <li>
                <header>
                    <small>{repo.Category}</small>
                    <a href={repo.HTMLURL}>
                        <h3 class="heading">
                            {repo.Name.split(`_`).join(` `)}
                        </h3>
                    </a>
                </header>
                <p class="text_small">{repo.Description}</p>
            </li>
        ))
    }
</ul>

<style lang="scss">
    li {
        max-width: 37.5rem;
        padding: 0.65rem 0;

        & header {
            & small {
                margin: 0 2rem 0 0;

                display: flex;
                flex-flow: column nowrap;

                font-weight: 600;
                text-transform: uppercase;
                color: var(--secondary-accent);
            }

            & a {
                height: 100%;
                width: 100%;
            }

            h3 {
                position: relative;
                display: inline-block;

                &::after {
                    content: "";
                    position: absolute;
                    bottom: -0.25rem;
                    left: 0;
                    height: 0;
                    width: 100%;
                    background-color: var(--tertiary-accent-750);
                    transition: bottom 0.3s ease;
                }

                &:hover::after {
                    bottom: -0.0125rem;
                    height: 0.125rem;
                }
            }
        }
    }
</style>
