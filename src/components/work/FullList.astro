---
const redisURL = import.meta.env.PUBLIC_UPSTASH_REDIS_REST_URL;
const redisToken = import.meta.env.PUBLIC_UPSTASH_REDIS_REST_TOKEN;
const token = `Bearer ${redisToken}`;

async function keys() {
  try {
    let res = await fetch(
      `${redisURL}/keys/*`,
      {
        headers: {Authorization: token}
      }
    );
    let data = await res.json()
    return data.result
  } catch (err) {
    console.error(err)
  }
}

let name: string
async function oneRepo(name: string) {
  try {
    let res = await fetch(
      `${redisURL}/mget/${name}`,
      {
        headers: {Authorization: token}
      }
    );
    let data = await res.json()
    return data.result
  } catch (err) {
    console.error(err)
  }
}

async function manyRepos() {
  let repos = []
  let data = await keys()
  for (let i = 0; i < data.length; i++) {
    name = data[i]
    let r = await oneRepo(data[i])
    repos.push(JSON.parse(r))
  }
  return repos
}

let allRepos = await manyRepos()
---
<ul>
  <div class="title">projects</div>
  {
    allRepos.map((repo) => (
      <li>
        <header>
          <small>
            {repo.Description != `n/a` ? repo.Description.split(`:`).map((item) => item).slice(0, -1) : `project`}
          </small>
          <a href={repo.HTMLURL}>
            <h3
              class="heading">{repo.FullName.split(`/`)[1].split(`_`).join(` `)}
            </h3>
          </a>
        </header>
        <p
          class="text_small">{repo.Description.split(`:`).map((item) => item).slice(1)}</p>
      </li>
    ))
  }
</ul>

<style lang="scss">
  li {
    max-width: 37.5rem;
    padding: 0.65rem 0;

    & header {
      & small {
        margin: 0 2rem 0 0;

        display: flex;
        flex-flow: column nowrap;

        font-weight: 400;
        text-transform: uppercase;
        color: var(--secondary-accent);
      }

      & a {
        height: 100%;
        width: 100%;
      }


      h3 {
        position: relative;
        display: inline-block;

        &::after {
          content: '';
          position: absolute;
          bottom: -0.25rem;
          left: 0;
          height: 0;
          width: 100%;
          background-color: var(--tertiary-accent-750);
          transition: bottom 0.3s ease;
        }

        &:hover::after {
          bottom: -0.0125rem;
          height: 0.125rem;
        }
      }
    }
  }
</style>
