---
const redisURL = import.meta.env.PUBLIC_UPSTASH_REDIS_REST_URL;
const redisToken = import.meta.env.PUBLIC_UPSTASH_REDIS_REST_TOKEN;
const token = `Bearer ${redisToken}`;

const allRepos = await fetch(
  `${redisURL}/mget/bid-classics/aoc-archive/utility/nvim/archive`,
  {
    headers: { Authorization: token }
  }
)
  .then((response) => response.json())
  .then((data) => {
    const result = data.result;
    return result.map((repo) => JSON.parse(repo));
  });
---

<ul>
  projects
  { allRepos.map((repo) => (
  <li>
    <header>
      <small>
        {repo.description != `n/a` ? repo.description .split(`:`) .map((item) =>
        item) .slice(0, -1) : `project`}
      </small>
      <a href={repo.htmlURL}>
        <h3 class="heading">{repo.name.split(`_`).join(` `)}</h3>
      </a>
    </header>
    <p class="text_small">
      {repo.description .split(`:`) .map((item) => item) .slice(1)}
    </p>
  </li>
  )) }
</ul>

<style lang="scss">
h3 {
    position: relative;
    display: inline-block;
}
h3::after {
    content: '';
    position: absolute;
    bottom: -0.25rem;
    left: 0;
    height: 0;
    width: 100%;
    background-color: var(--tertiary-accent-750);
    transition: bottom 0.3s ease;
}
h3:hover::after {
    bottom: -0.0125rem;
    height: 0.125rem;
}
ul {
    & li {
        max-width: 37.5rem;
        padding: 0.65rem 0;

        & header {
            & small {
                margin: 0 2rem 0 0;

                display: flex;
                flex-flow: column nowrap;

                font-weight: 400;
                text-transform: uppercase;
                color: var(--secondary-accent);
            }
        }
    }
}
.heading {
    display: inline-block;
}
</style>
