---
import HoverLink from '../global/HoverLink.astro';
const redisURL = import.meta.env.PUBLIC_UPSTASH_REDIS_REST_URL;
const redisToken = import.meta.env.PUBLIC_UPSTASH_REDIS_REST_TOKEN;
const token = `Bearer ${redisToken}`;

let allRepos = await fetch(
  `${redisURL}/mget/TextFlowClient/utility/archive`,
  {
    headers: { Authorization: token }
  }
)
  .then((response) => response.json())
  .then((data) => {
    let result = data.result;
    return result.map((repo) => JSON.parse(repo)).reverse();
  });
---

<ul>
  { allRepos.slice(0, -(allRepos.length - 2)).map((repo) => (
  <li>
    <header>
      <small>
        {repo.description != `n/a` ? repo.description .split(`:`) .map((item) =>
        item) .slice(0, -1) : `project`}
      </small>
      <h3 class="heading">{repo.name.split(`_`).join(` `)}</h3>
    </header>
    <p class="text_small">
      {repo.description .split(`:`) .map((item) => item) .slice(1)}
    </p>
    <nav>
      <HoverLink href="{repo.htmlURL}" title="source" />
      {repo.homepage != `n/a` ? (
      <a class="text_small" href="{repo.homepage}"> demo </a>
      ) : null}
    </nav>
  </li>
  )) }
</ul>

<style lang="scss">
  ul {
    & li {
      max-width: 37.5rem;
      padding: 0.65rem 0;

      & header {
        & small {
          margin: 0 2rem 0 0;

          color: var(--secondary-accent);

          font-weight: 400;

          text-transform: uppercase;
        }
      }
      & nav {
        & a:first-of-type {
          margin: 0 1rem 0 0;
        }
      }
    }
  }
</style>
